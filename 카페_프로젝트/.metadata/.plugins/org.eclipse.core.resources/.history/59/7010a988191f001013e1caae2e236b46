package com.Cafe.Controller;

import java.util.List;

import com.Cafe.dao.ProductDAO;
import com.Cafe.model.PRODUCT;

public class ProductController {
	private ProductDAO productDAO;

	public ProductController() {
		this.productDAO = new ProductDAO();
	}

	public List<PRODUCT> getAllProducts() {
		return productDAO.getAllProducts();
	}

	public PRODUCT getProductById(int id) {
		return productDAO.getProductById(id);
	}

	public List<PRODUCT> getProductsByType(String productType) {
		return productDAO.getProductsByType(productType);
	}

	public boolean addProduct(PRODUCT product) {
		// 유효성 검사 수행
		if (product.getProductName() == null || product.getProductName().trim().isEmpty()) {
			return false;
		}

		if (product.getProductType() == null || product.getProductType().trim().isEmpty()) {
			return false;
		}

		// 이미 존재하는 ID인지 확인
		if (productDAO.getProductById(product.getProductId()) != null) {
			return false;
		}

		return productDAO.insertProduct(product);
	}

	public boolean updateProduct(PRODUCT product) {
		// 유효성 검사 수행
		if (product.getProductName() == null || product.getProductName().trim().isEmpty()) {
			return false;
		}

		if (product.getProductType() == null || product.getProductType().trim().isEmpty()) {
			return false;
		}

		// 존재하는 ID인지 확인
		if (productDAO.getProductById(product.getProductId()) == null) {
			return false;
		}

		return productDAO.updateProduct(product);
	}

	public boolean deleteProduct(int id) {
		// 존재하는 ID인지 확인
		if (productDAO.getProductById(id) == null) {
			return false;
		}

		return productDAO.deleteProduct(id);
	}

	// 제품 검색 기능
	public List<PRODUCT> searchProductsByName(String keyword) {
		List<PRODUCT> allProducts = productDAO.getAllProducts();

		// Java 8 스트림을 사용하여 필터링
		return allProducts.stream()
				.filter(product -> product.getProductName().toLowerCase().contains(keyword.toLowerCase())).toList();
	}

	// 회사별 제품 조회
	public List<PRODUCT> searchProductsByCompany(String company) {
		List<PRODUCT> allProducts = productDAO.getAllProducts();

		return allProducts.stream().filter(product -> product.getCompany().equalsIgnoreCase(company)).toList();
	}
}