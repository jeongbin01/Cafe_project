package com.Cafe.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import com.Cafe.model.Delvery;

public class DeliveryDAO {
	private final String url = "jdbc:oracle:thin:@localhost:10521:XE";
	private final String user = "C##Cafe_Website";
	private final String password = "1234";

	private Connection getConnection() throws SQLException {
		return DriverManager.getConnection(url, user, password);
	}

	// 배송 등록
	public boolean insertDelivery(Delvery delivery) {
		String sql = "INSERT INTO DELIVERY (delivery_id, order_id, courier_company, expected_date, actual_date, delivery_status) VALUES (?, ?, ?, ?, ?, ?)";
		try (Connection conn = getConnection(); PreparedStatement pstmt = conn.prepareStatement(sql)) {
			pstmt.setInt(1, delivery.getDeliveryId());
			pstmt.setInt(2, delivery.getOrderId());
			pstmt.setString(3, delivery.getCourierCompany());
			pstmt.setDate(4, delivery.getExpectedDate());
			pstmt.setDate(5, delivery.getActualDate());
			pstmt.setString(6, delivery.getDeliveryStatus());
			return pstmt.executeUpdate() > 0;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return false;
	}

	// 모든 배송 조회
	public List<Delvery> getAllDeliveries() {
		List<Delvery> deliveryList = new ArrayList<>();
		String sql = "SELECT * FROM DELIVERY";
		try (Connection conn = getConnection();
				PreparedStatement pstmt = conn.prepareStatement(sql);
				ResultSet rs = pstmt.executeQuery()) {
			while (rs.next()) {
				Delvery delivery = new Delvery(rs.getInt("delivery_id"), rs.getInt("order_id"),
						rs.getString("courier_company"), rs.getDate("expected_date"), rs.getDate("actual_date"),
						rs.getString("delivery_status"));
				deliveryList.add(delivery);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return deliveryList;
	}

	// 배송 상태 업데이트
	public boolean updateDeliveryStatus(int deliveryId, String status) {
		String sql = "UPDATE DELIVERY SET delivery_status = ? WHERE delivery_id = ?";
		try (Connection conn = getConnection(); PreparedStatement pstmt = conn.prepareStatement(sql)) {
			pstmt.setString(1, status);
			pstmt.setInt(2, deliveryId);
			return pstmt.executeUpdate() > 0;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return false;
	}

	// 배송 삭제
	public boolean deleteDelivery(int deliveryId) {
		String sql = "DELETE FROM DELIVERY WHERE delivery_id = ?";
		try (Connection conn = getConnection(); PreparedStatement pstmt = conn.prepareStatement(sql)) {
			pstmt.setInt(1, deliveryId);
			return pstmt.executeUpdate() > 0;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return false;
	}
}
