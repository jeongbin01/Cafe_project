package com.Cafe.dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.Cafe.model.Customer;

public class CustomerDAO {
	private final String url = "jdbc:oracle:thin:@localhost:1521:xe";
	private final String user = "C##Cafe_Website";
	private final String password = "1234";

	// DB 연결 생성
	private Connection getConnection() throws SQLException {
		return DriverManager.getConnection(url, user, password);
	}

	// 모든 고객 정보 조회
	public List<Customer> getAllCustomers() {
		List<Customer> customerList = new ArrayList<>();
		String sql = "SELECT customer_id, name, phone, email, address, signup_date FROM CUSTOMER";
		try (Connection conn = getConnection();
				PreparedStatement pstmt = conn.prepareStatement(sql);
				ResultSet rs = pstmt.executeQuery()) {

			while (rs.next()) {
				java.sql.Date sqlDate = rs.getDate("signup_date");
				String signupDate = (sqlDate != null) ? sqlDate.toLocalDate().toString() : null;

				Customer customer = new Customer(
					rs.getInt("customer_id"),
					rs.getString("name"),
					rs.getString("phone"),
					rs.getString("email"),
					rs.getString("address"),
					signupDate
				);
				customerList.add(customer);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return customerList;
	}

	// ID로 고객 조회
	public Customer getCustomerById(int customerId) {
		String sql = "SELECT customer_id, name, phone, email, address, signup_date FROM CUSTOMER WHERE customer_id = ?";
		try (Connection conn = getConnection(); PreparedStatement pstmt = conn.prepareStatement(sql)) {

			pstmt.setInt(1, customerId);
			try (ResultSet rs = pstmt.executeQuery()) {
				if (rs.next()) {
					return new Customer(
						rs.getInt("customer_id"),
						rs.getString("name"),
						rs.getString("phone"),
						rs.getString("email"),
						rs.getString("address"),
						rs.getDate("signup_date").toString()
					);
				}
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

	// 새 고객 등록 (customer_id는 DB에서 자동 생성됨)
	public boolean insertCustomer(Customer customer) {
		String sql = "INSERT INTO CUSTOMER (name, phone, email, address, signup_date) VALUES (?, ?, ?, ?, ?)";
		try (Connection conn = getConnection(); PreparedStatement pstmt = conn.prepareStatement(sql)) {

			pstmt.setString(1, customer.getName());
			pstmt.setString(2, customer.getPhone());
			pstmt.setString(3, customer.getEmail());
			pstmt.setString(4, customer.getAddress());
			pstmt.setDate(5, Date.valueOf(customer.getSignupDate())); // 문자열 "YYYY-MM-DD" → java.sql.Date

			return pstmt.executeUpdate() > 0;
		} catch (IllegalArgumentException ie) {
			System.err.println("signupDate 형식 오류(YYYY-MM-DD): " + customer.getSignupDate());
			return false;
		} catch (SQLException e) {
			e.printStackTrace();
			return false;
		}
	}

	// 고객 정보 수정
	public boolean updateCustomer(Customer customer) {
		String sql = "UPDATE CUSTOMER SET name = ?, phone = ?, email = ?, address = ?, signup_date = ? WHERE customer_id = ?";
		try (Connection conn = getConnection(); PreparedStatement pstmt = conn.prepareStatement(sql)) {

			pstmt.setString(1, customer.getName());
			pstmt.setString(2, customer.getPhone());
			pstmt.setString(3, customer.getEmail());
			pstmt.setString(4, customer.getAddress());
			pstmt.setDate(5, Date.valueOf(customer.getSignupDate()));
			pstmt.setInt(6, customer.getCustomerId());

			return pstmt.executeUpdate() > 0;
		} catch (IllegalArgumentException ie) {
			System.err.println("signupDate 형식 오류(YYYY-MM-DD): " + customer.getSignupDate());
			return false;
		} catch (SQLException e) {
			e.printStackTrace();
			return false;
		}
	}

	// 고객 삭제
	public boolean deleteCustomer(int customerId) {
		String sql = "DELETE FROM CUSTOMER WHERE customer_id = ?";
		try (Connection conn = getConnection(); PreparedStatement pstmt = conn.prepareStatement(sql)) {
			pstmt.setInt(1, customerId);
			return pstmt.executeUpdate() > 0;
		} catch (SQLException e) {
			e.printStackTrace();
			return false;
		}
	}
}
