package com.Cafe.Controller;

import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

import com.Cafe.model.Customer;

public class CustomerController {
    private final String url = "jdbc:oracle:thin:@localhost:1521:xe";
    private final String user = "C##Cafe_Website";
    private final String password = "1234";

    // DB 연결 생성
    private Connection getConnection() throws SQLException {
        return DriverManager.getConnection(url, user, password);
    }

    // 모든 고객 정보 조회
    public List<Customer> getAllCustomers() {
        List<Customer> customerList = new ArrayList<>();
        String sql = "SELECT customer_id, name, phone, email, address, signup_date FROM CUSTOMER";
        try (Connection conn = getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql);
             ResultSet rs = pstmt.executeQuery()) {

            while (rs.next()) {
                java.sql.Date sqlDate = rs.getDate("signup_date");
                String signupDate = (sqlDate != null)
                        ? sqlDate.toLocalDate().toString()
                        : null;

                Customer customer = new Customer(
                        rs.getInt("customer_id"),
                        rs.getString("name"),
                        rs.getString("phone"),
                        rs.getString("email"),
                        rs.getString("address"),
                        signupDate
                );
                customerList.add(customer);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return customerList;
    }

    // ID로 고객 조회
    public Customer getCustomerById(int customerId) {
        String sql = "SELECT customer_id, name, phone, email, address, signup_date FROM CUSTOMER WHERE customer_id = ?";
        try (Connection conn = getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, customerId);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    java.sql.Date sqlDate = rs.getDate("signup_date");
                    String signupDate = (sqlDate != null)
                            ? sqlDate.toLocalDate().toString()
                            : null;

                    return new Customer(
                            rs.getInt("customer_id"),
                            rs.getString("name"),
                            rs.getString("phone"),
                            rs.getString("email"),
                            rs.getString("address"),
                            signupDate
                    );
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    // 새 고객 등록
    public boolean insertCustomer(Customer customer) {
        String sql;
        if (customer.getCustomerId() != 0) {
            // 사용자가 직접 ID 지정
            sql = """
                INSERT INTO CUSTOMER
                  (customer_id, name, phone, email, address, signup_date)
                VALUES (?, ?, ?, ?, ?, ?)
                """;
        } else {
            // ID 자동 생성 (시퀀스 사용)
            sql = """
                INSERT INTO CUSTOMER
                  (customer_id, name, phone, email, address, signup_date)
                VALUES (CUST_SEQ.NEXTVAL, ?, ?, ?, ?, ?)
                """;
        }

        try (Connection conn = getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            if (customer.getCustomerId() != 0) {
                pstmt.setInt(1, customer.getCustomerId());
                pstmt.setString(2, customer.getName());
                pstmt.setString(3, customer.getPhone());
                pstmt.setString(4, customer.getEmail());
                pstmt.setString(5, customer.getAddress());
                pstmt.setDate(6, Date.valueOf(customer.getSignupDate()));
            } else {
                pstmt.setString(1, customer.getName());
                pstmt.setString(2, customer.getPhone());
                pstmt.setString(3, customer.getEmail());
                pstmt.setString(4, customer.getAddress());
                String dateStr = customer.getSignupDate() != null
                        ? customer.getSignupDate()
                        : LocalDate.now().toString();
                pstmt.setDate(5, Date.valueOf(dateStr));
            }

            return pstmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    // 고객 정보 수정
    public boolean updateCustomer(Customer customer) {
        String sql = "UPDATE CUSTOMER SET name = ?, phone = ?, email = ?, address = ?, signup_date = ? WHERE customer_id = ?";
        try (Connection conn = getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, customer.getName());
            pstmt.setString(2, customer.getPhone());
            pstmt.setString(3, customer.getEmail());
            pstmt.setString(4, customer.getAddress());
            pstmt.setDate(5, Date.valueOf(customer.getSignupDate()));
            pstmt.setInt(6, customer.getCustomerId());

            return pstmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    // 고객 삭제
    public boolean deleteCustomer(int customerId) {
        String sql = "DELETE FROM CUSTOMER WHERE customer_id = ?";
        try (Connection conn = getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setInt(1, customerId);
            return pstmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }
}
